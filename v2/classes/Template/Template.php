<?php

/*************************************************************************
                           |Template.php|  -  description
                             -------------------
    début                : |11.02.2006|
    copyright            : (C) 2006 par BERLIAT Cyrille
    e-mail               : cyrille.berliat@free.fr
*************************************************************************/

//-------------- Interface of <Template> class (file Template.php) -----------------
if (defined('TEMPLATE_H'))
{
    return;
}
else
{

}
define('TEMPLATE_H',1);

//-------------------------------------------------------- system Includes

//------------------------------------------------------ personal Includes

//-------------------------------------------------------------- Constants

//----------------------------------------------------------------- PUBLIC

//------------------------------------------------------------------ Types 

//------------------------------------------------------------------------  
// Role of <Template> class
//
//
//------------------------------------------------------------------------ 

class Template extends AbstractClass
{
//----------------------------------------------------------------- PUBLIC

//--------------------------------------------------------- Public Methods
    // public function Méthode ( )
    // User's manual :
    //
    // Contract :
    //
    
    public function SetMaquette ( $maquette )
    // User's manual :
    //assign $maquette to page skeleton
    //
    // Returns :
    //
    // Contrat :
    //the skeleton may has the [TAG] you'll set
    {
        $this->maquette = $maquette;
    } //----- Fin de SetMaquette
    
    public function SetTag ( $tag , Template $value )
    // User's manual :
    //assign a template $value to a [TAG] 
	//$tag IS NOT [TAG] but only TAG, without the []
    //
    // Contract :
    //the skeleton you've set may contain the [$tag]
	//$value must be != than null
    {
        $this->tags['['.$tag.']'] = $value;
    } //----- Fin de SetTag
    
    public function GetTag ( $tag )
    // User's manual :
    //get the Template object assigned to a [$tag]
    //
    // Returns :
    //- an object of type Errors if an error has been met
    //- an object of type Template.
	//
	// Errors :
	//- TemplateError::TEMPLATE_TAG_INEXISTANT, the tag has neve
	//been assigned
    //
    // Contrat :
    //the skeleton you've set may contain the [$tag]
    {
        if ( isset ( $this->tags['['.$tag.']'] ) )
        {
            return $this->tags['['.$tag.']'];
        }
        else
        {
            $errs = new Errors ( );
            
            $errs->Add( new TemplateError( TemplateError::TEMPLATE_TAG_INEXISTANT , 'The tag ['.$tag.'] doesn\'t exist.' ) );
            
            return $errs;
        }
    } //----- Fin de GetTag
    
    public function Generate( )
    // User's manual :
    //Use the template to generate a child of model
    //
    // Returns :
    //a string that contains the generated contents
    //
    {
		if ( count ( $this->tags ) == 0 )
		// if there's no tag, maquette has to be returned as it is
		{
			return $this->maquette;
		}
		else
		// else, replace tags by value, generated by subtemplate...
		{
		
			$generated = '';
			
			foreach ( $this->tags as $tag => $value )
			{
				// generation by hierarchy
				$generated .= str_replace ( $tag, $value->Generate(), $this->maquette );
			}
		}
	
        return $generated;
    } //----- Fin de Generate
    
//-------------------------------------------- Constructeurs - destructeur
    public function __construct( )
    // User's manual :
	//instanciate an object of type Template
    //
    // Contrat :
    //
    {        
        $this->tags = array();
    } //---- Fin du constructeur
  
//---------------------------------------------------------- Magic Methods
	public function __ToString ()
    // User's manual :
    //
    // Returns :
	//
    // Contrat :
    //
	{
		return $this->Generate ( );
	} // End of __ToString

//---------------------------------------------------------------- PRIVATE 

//------------------------------------------------------ protected methods

//--------------------------------------------------- protected properties

    protected $maquette;
    protected $tags; // tags de remplacement

}

//----------------------------------------------------- Others definitions

?>